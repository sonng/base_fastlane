# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
# fastlane_require 'json'
require_relative 'config'

default_platform(:ios)

platform :ios do
  
  desc "Build the application"
  lane :build do |options|
    options = check_and_load_config options
    build_internal options
  end

  lane :build_and_upload do |options|
    options = check_and_load_config options
    build_internal options
    distribute_ipa options
    notify options
  end

  desc "Build the application"
  lane :build_internal do |options|
    set_version(options)
    certificates_and_profiles(options)
    build_ipa(options)
    delete_temp_keychain options[:keychain_name]
  end

  # Helper Methods
  def set_version(options)
    increment_version_number(version_number: options[:version_number])
    increment_build_number(build_number: options[:build_number])
  end

  def certificates_and_profiles(options)
    ensure_temp_keychain options[:keychain_name]
    match(
      git_url: options[:git_url],
      git_branch: options[:git_repo],
      app_identifier: options[:config][:app_identifier] || options[:app_identifier],
      type: options[:config][:build_type], 
      readonly: true, 
      verbose: true,
      keychain_name: options[:keychain_name]
    )
  end

  def build_ipa(options)
    build_app(
      workspace: options[:workspace],
      configuration: options[:config][:config],
      scheme: options[:config][:scheme],
      silent: false,
      clean: true,
      output_directory: options[:build_path],
      output_name: options[:output_name]
    )
  end

  def distribute_ipa(options)
    hockey(
      api_token: options[:config][:hockeyapp_id] || options[:hockeyapp_id],
      ipa: "./#{options[:build_path]}#{options[:output_name]}"
    )
  end

  def notify(options)
    slack(
      message: options[:slack_message],
      slack_url: options[:slack_url],
      channel: options[:slack_channel],
      payload: {
        "Version": options[:build_number],
        "Public Download URL": lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]
      }
    )
  end

  def ensure_temp_keychain(name)
    delete_keychain(name: name) if File.exists? File.expand_path("~/Library/Keychains/#{name}-db")
    create_keychain(name: name, password: 'temppassword', unlock: true, timeout: false)
  end

  def delete_temp_keychain(name)
    delete_keychain(name: name) if File.exists? File.expand_path("~/Library/Keychains/#{name}-db")
  end
end
